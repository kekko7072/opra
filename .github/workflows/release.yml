name: Build and Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  
jobs:
  build-and-release:
    runs-on: macos-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Xcode
      uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable
    
    - name: Get version from project
      id: version
      run: |
        VERSION=$(xcodebuild -showBuildSettings -project Opra.xcodeproj -target Opra | grep MARKETING_VERSION | head -1 | awk '{print $3}')
        if [ -z "$VERSION" ]; then
          VERSION="1.0.0"
        fi
        BUILD_NUMBER=$(xcodebuild -showBuildSettings -project Opra.xcodeproj -target Opra | grep CURRENT_PROJECT_VERSION | head -1 | awk '{print $3}')
        if [ -z "$BUILD_NUMBER" ]; then
          BUILD_NUMBER="1"
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "build=$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "tag=v$VERSION-build$BUILD_NUMBER" >> $GITHUB_OUTPUT
        echo "Version: $VERSION (Build $BUILD_NUMBER)"
    
    - name: Build app
      run: |
        xcodebuild -project Opra.xcodeproj \
          -scheme Opra \
          -configuration Release \
          -derivedDataPath ./build \
          clean build
    
    - name: Verify build output
      run: |
        echo "Checking build output..."
        ls -la ./build/Build/Products/Release/
        if [ ! -d "./build/Build/Products/Release/Opra.app" ]; then
          echo "Error: Opra.app not found!"
          exit 1
        fi
        echo "Build successful!"
    
    - name: Ad-hoc code sign
      run: |
        echo "Applying ad-hoc code signature..."
        codesign --force --deep --sign - ./build/Build/Products/Release/Opra.app
        echo "Verifying signature..."
        codesign --verify --verbose ./build/Build/Products/Release/Opra.app
        echo "Ad-hoc signature applied successfully"
    
    - name: Create DMG
      run: |
        # Create a temporary directory for the DMG
        mkdir -p dmg_temp
        
        # Copy the app to the DMG directory
        cp -R ./build/Build/Products/Release/Opra.app dmg_temp/
        
        # Create a symbolic link to Applications
        ln -s /Applications dmg_temp/Applications
        
        # Create the DMG
        hdiutil create -volname "Opra ${{ steps.version.outputs.version }}" \
          -srcfolder dmg_temp \
          -ov -format UDZO \
          Opra-${{ steps.version.outputs.version }}.dmg
        
        # Clean up
        rm -rf dmg_temp
        
        echo "DMG created successfully"
        ls -lh Opra-${{ steps.version.outputs.version }}.dmg
    
    - name: Create ZIP of app
      run: |
        cd ./build/Build/Products/Release/
        zip -r $GITHUB_WORKSPACE/Opra-${{ steps.version.outputs.version }}.app.zip Opra.app
        cd $GITHUB_WORKSPACE
        echo "ZIP created successfully"
        ls -lh Opra-${{ steps.version.outputs.version }}.app.zip
    
    - name: Generate release notes
      id: release_notes
      run: |
        cat > release_notes.md << 'EOF'
        ## Opra v${{ steps.version.outputs.version }}
        
        ### 🚀 What's New
        
        Automated release built from the latest main branch commit.
        
        ### 📦 Downloads
        
        - **Opra-${{ steps.version.outputs.version }}.dmg**: macOS disk image (recommended)
        - **Opra-${{ steps.version.outputs.version }}.app.zip**: Standalone app bundle
        
        ### 📝 Installation
        
        #### Option 1: Using DMG (Recommended)
        1. Download the `.dmg` file
        2. Open the downloaded `.dmg` file
        3. Drag the Opra app icon to your Applications folder
        4. Launch Opra from your Applications folder
        
        #### Option 2: Using ZIP
        1. Download the `.app.zip` file
        2. Extract the ZIP file
        3. Move Opra.app to your Applications folder
        4. Launch Opra from your Applications folder
        
        ### ⚠️ Security Note
        
        This app uses ad-hoc code signing (not notarized by Apple). On first launch:
        
        **If you get a warning that the app cannot be opened:**
        1. **Right-click** (or Control-click) on Opra.app and select **"Open"**
        2. Click **"Open"** again in the dialog that appears
        3. The app will now run and remember your choice
        
        **Alternative method:**
        1. Open **System Settings** > **Privacy & Security**
        2. Scroll down to find the blocked app message
        3. Click **"Open Anyway"**
        
        **Or remove quarantine attribute via Terminal:**
        ```bash
        xattr -cr /Applications/Opra.app
        ```
        
        ### 📋 Build Information
        
        - **Version**: ${{ steps.version.outputs.version }}
        - **Build**: ${{ steps.version.outputs.build }}
        - **Commit**: ${{ github.sha }}
        - **Built with**: Xcode on macOS (latest stable)
        EOF
        
        echo "Release notes generated"
    
    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ steps.version.outputs.tag }}
        name: "Opra v${{ steps.version.outputs.version }}"
        bodyFile: release_notes.md
        draft: false
        prerelease: false
        artifacts: |
          Opra-${{ steps.version.outputs.version }}.dmg
          Opra-${{ steps.version.outputs.version }}.app.zip
        token: ${{ secrets.GITHUB_TOKEN }}
        allowUpdates: true
        artifactErrorsFailBuild: true
